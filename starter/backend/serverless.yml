app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing: 
    lambda: true
    apiGateway: true 
  environment:
    TODOS_TABLE: serverless-todo-app-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    IMAGES_S3_BUCKET: viettq-udacity-serverless-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3000
    PROJECT_NAME: udacity-serverless-todo-app
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
  logs: 
    # Enable API Gateway logs
    restApi: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"    

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request: 
            schemas: 
              application/json: ${file(src/models/createModel.json)}
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'          

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request: 
            schemas: 
              application/json: ${file(src/models/updateModel.json)}
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-generate-s3-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          !Ref ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          !Ref 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false          
    # Here "TodosTable" is the name for cross-referencing  in the serverless.yml file
    # It's not the name of the actual DynamoDB table. 
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: todoId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: todoId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
          PublicAccessBlockConfiguration:
            BlockPublicAcls: false
            BlockPublicPolicy: false
            IgnorePublicAcls: false
            RestrictPublicBuckets: false
          CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - '*'
                AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
                MaxAge: 3000

    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: MyPolicy
            Version: "2012-10-17"
            Statement:
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*'
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
          Bucket: !Ref AttachmentsBucket